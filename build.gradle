buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.5.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }
}


configure( subprojects ) { project ->
    group = 'com.github.decamp'
    buildDir = "$projectDir/build"
    version = '0.0.4'
    ext.versionCode = 4

    def config = gradle.projectConfigs[ project.name ]

    repositories {
        jcenter()
    }

    apply plugin: 'idea'
    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    if( config.type.startsWith( 'java_' ) ) {
        apply plugin: 'java'
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7

        if( config.type == 'java_app' ) {
            apply plugin: 'application'
        }

        test {
            workingDir = "$buildDir/resources/main"
            jvmArgs = []
            systemProperties = [:]
            testLogging.showStandardStreams = true

            onOutput { descriptor, event ->
                logger.lifecycle( "Test: " + descriptor + " produced standard out/err: " + event.message )
            }

            beforeTest { descriptor ->
                logger.lifecycle( "Running test: " + descriptor )
            }
        }

        dependencies {
            testCompile 'junit:junit:4.12'
        }

        tasks.assemble.doFirst {
            // Workaround for gradle bug.
            new File( "$buildDir/resources/main" ).mkdirs();
        }

        javadoc {
            failOnError false
            //options.addStringOption( 'Xdoclint:none', '-quiet' )
        }

        task javadocJar( type: Jar, dependsOn: javadoc ) {
            classifier = 'javadoc'
            from "$buildDir/docs/javadoc"
        }

        task sourcesJar( type: Jar ) {
            classifier = 'sources'
            from sourceSets.main.allJava
        }

        if( config.publish ) {
            apply plugin: 'maven'
            artifacts {
                archives jar
                archives javadocJar
                archives sourcesJar
            }
        }

    } else if( config.type.startsWith( 'android_' ) ) {
        if( config.type == 'android_app' ) {
            apply plugin: 'com.android.application'
        } else {
            apply plugin: 'com.android.library'
        }
        apply plugin: 'com.github.dcendents.android-maven'

        android {
            compileSdkVersion 23
            buildToolsVersion '23.0.2'

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_7
                targetCompatibility JavaVersion.VERSION_1_7
            }

            sourceSets {
                main {
                    manifest {
                        srcFile "$projectDir/src/main/AndroidManifest.xml"
                    }
                }
            }

            defaultConfig {
                versionCode versionCode
                versionName project.version
                minSdkVersion 19
                targetSdkVersion 19
                testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
                testInstrumentationRunnerArgument "size", "medium"
                testHandleProfiling true
                testFunctionalTest true
            }

            packagingOptions {
                exclude 'META-INF/DEPENDENCIES.txt'
                exclude 'META-INF/NOTICE.txt'
                exclude 'META-INF/NOTICE'
                exclude 'META-INF/LICENSE'
                exclude 'META-INF/INDEX.LIST'
            }

            lintOptions {
                abortOnError false
            }

            if( config.type == 'android_app' ) {
                def storePath = "$rootDir/certs/bits.jks"
                def signJar = file( storePath ).exists()
                if( signJar ) {
                    signingConfigs {
                        release {
                            storeFile file( storePath )
                            storePassword ""
                            keyAlias "bits"
                            keyPassword ""
                        }
                    }
                }

                buildTypes {
                    release {
                        minifyEnabled false
                        // Looks like it will take a lot of work to get proguard working.
                        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                        if( signJar ) {
                            signingConfig signingConfigs.release
                            zipAlignEnabled true
                        }
                    }
                }
            } else {
                buildTypes {
                    release {
                        minifyEnabled false
                    }
                }
            }
        }


        dependencies {
            androidTestCompile 'junit:junit:4.12'
            androidTestCompile 'com.android.support.test:rules:0.4.1'
            androidTestCompile 'com.android.support.test:runner:0.4.1'
            androidTestCompile 'org.mockito:mockito-core:1.10.19'
            androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
        }


        task sourcesJar( type: Jar ) {
            classifier = 'sources'
            from android.sourceSets.main.java.srcDirs
        }

        task javadoc(type: Javadoc) {
            failOnError false
            source = android.sourceSets.main.java.sourceFiles
            classpath += project.files( android.getBootClasspath().join(File.pathSeparator) )
            classpath += configurations.compile
        }

        task javadocJar( type: Jar, dependsOn: javadoc ) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        if( config.publish ) {
            apply plugin: 'com.github.dcendents.android-maven'
            artifacts {
//                archives javadocJar
                archives sourcesJar
            }
        }
    }

    if( config.publish ) {
        install {
            repositories.mavenInstaller {
                pom.project {
                    description = project.description
                    licenses {
                        license {
                            name 'BSD 2-Clause License'
                            url 'http://opensource.org/licenses/BSD-2-Clause'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'decamp'
                            name 'Philip DeCamp'
                            url 'http://de.camp'
                            organization ''
                            organizationUrl ''
                            roles {
                                role 'developer'
                            }
                        }
                    }
                }
            }
        }
    }
}


project( ':util-common' ) {
    description = 'Utils common to all archs'
}


project( ':util-standard' ) {
    description = 'Utils for standard Java Runtime Environment only.'
    dependencies {
        compile project( ":util-common" )
    }
}


project( ':util-android' ) {
    description = 'Utils for Android Runtime Environment only'
    dependencies {
        compile project( ":util-common" )
    }
}
